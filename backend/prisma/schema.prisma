// MAR ABU PROJECTS SERVICES LLC - Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===============================
// USER MANAGEMENT
// ===============================
enum UserRole {
  CUSTOMER
  PROPERTY_HOST
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

model User {
  id                String          @id @default(cuid())
  email             String          @unique
  firstName         String
  lastName          String
  phone             String?
  role              UserRole        @default(CUSTOMER)
  status            UserStatus      @default(PENDING_VERIFICATION)
  password          String
  avatar            String?
  dateOfBirth       DateTime?
  address           String?
  city              String?
  state             String?
  country           String?         @default("Nigeria")
  
  // Verification
  emailVerified     DateTime?
  phoneVerified     DateTime?
  identityVerified  DateTime?
  idType            String?
  idNumber          String?
  
  // Timestamps
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  lastLoginAt       DateTime?
  
  // Relations
  bookings          Booking[]
  properties        Property[]      @relation("PropertyHost")
  reviews           Review[]
  receipts          Receipt[]
  notifications     Notification[]
  auditLogs         AuditLog[]
  
  @@map("users")
}

// ===============================
// PROPERTY MANAGEMENT
// ===============================
enum PropertyType {
  APARTMENT
  PENTHOUSE
  VILLA
  SUITE
  MANSION
  HOUSE
}

enum PropertyStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  COMING_SOON
  SUSPENDED
}

model Property {
  id                String          @id @default(cuid())
  name              String
  description       String?
  type              PropertyType
  status            PropertyStatus  @default(ACTIVE)
  
  // Location
  address           String
  city              String
  state             String
  country           String          @default("Nigeria")
  latitude          Float?
  longitude         Float?
  
  // Property Details
  bedrooms          Int
  bathrooms         Int
  maxGuests         Int
  size              Float?          // Square meters
  floor             Int?
  buildingName      String?
  
  // Pricing
  baseRate          Float           // Per night in Naira
  weekendPremium    Float?          @default(0) // Percentage
  monthlyDiscount   Float?          @default(0) // Percentage
  cleaningFee       Float?          @default(0)
  securityDeposit   Float?          @default(0)
  serviceFee        Float?          @default(0.05) // 5% default
  
  // Booking Rules
  minStay           Int             @default(1)
  maxStay           Int             @default(90)
  checkInTime       String          @default("15:00")
  checkOutTime      String          @default("11:00")
  cancellationPolicy String?
  houseRules        String?
  
  // Media
  images            PropertyImage[]
  documents         PropertyDocument[]
  
  // Timestamps
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  hostId            String
  host              User            @relation("PropertyHost", fields: [hostId], references: [id])
  amenities         PropertyAmenity[]
  bookings          Booking[]
  reviews           Review[]
  availability      PropertyAvailability[]
  
  @@map("properties")
}

model PropertyImage {
  id          String    @id @default(cuid())
  url         String
  title       String?
  description String?
  order       Int       @default(0)
  isMain      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@map("property_images")
}

model PropertyDocument {
  id          String    @id @default(cuid())
  name        String
  url         String
  type        String    // license, certificate, etc.
  size        Int?
  mimeType    String?
  createdAt   DateTime  @default(now())
  
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@map("property_documents")
}

model PropertyAmenity {
  id          String    @id @default(cuid())
  name        String
  category    String    // Basic, Premium, Luxury
  icon        String?
  description String?
  
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@map("property_amenities")
}

model PropertyAvailability {
  id          String    @id @default(cuid())
  date        DateTime
  available   Boolean   @default(true)
  price       Float?    // Override base rate for specific date
  minStay     Int?      // Override property min stay
  notes       String?
  
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@unique([propertyId, date])
  @@map("property_availability")
}

// ===============================
// BOOKING MANAGEMENT
// ===============================
enum BookingStatus {
  PENDING_APPROVAL
  APPROVED
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
  REFUNDED
  COMPLETED
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  REFUNDED
  FAILED
}

model Booking {
  id                String          @id @default(cuid())
  bookingNumber     String          @unique
  
  // Dates & Guests
  checkIn           DateTime
  checkOut          DateTime
  nights            Int
  adults            Int             @default(1)
  children          Int             @default(0)
  
  // Status
  status            BookingStatus   @default(PENDING_APPROVAL)
  paymentStatus     PaymentStatus   @default(PENDING)
  
  // Pricing
  baseAmount        Float
  cleaningFee       Float           @default(0)
  serviceFee        Float           @default(0)
  taxes             Float           @default(0)
  discounts         Float           @default(0)
  totalAmount       Float
  paidAmount        Float           @default(0)
  
  // Guest Information
  guestName         String
  guestEmail        String
  guestPhone        String
  guestAddress      String?
  specialRequests   String?
  arrivalTime       String?
  
  // Booking Details
  cancellationReason String?
  cancellationDate   DateTime?
  refundAmount       Float?
  
  // Admin Fields
  adminNotes        String?
  approvedBy        String?
  approvedAt        DateTime?
  
  // Timestamps
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  
  // Relations
  customerId        String
  customer          User            @relation(fields: [customerId], references: [id])
  propertyId        String
  property          Property        @relation(fields: [propertyId], references: [id])
  receipts          Receipt[]
  reviews           Review[]
  
  @@map("bookings")
}

// ===============================
// RECEIPT VERIFICATION
// ===============================
enum ReceiptStatus {
  PENDING
  VERIFIED
  REJECTED
  UNDER_REVIEW
}

model Receipt {
  id              String          @id @default(cuid())
  fileName        String
  originalName    String
  fileUrl         String
  fileSize        Int
  mimeType        String
  
  // Payment Details
  amount          Float
  paymentMethod   String
  bank            String?
  transactionRef  String?
  transactionDate DateTime?
  
  // Verification
  status          ReceiptStatus   @default(PENDING)
  verifiedBy      String?
  verifiedAt      DateTime?
  rejectionReason String?
  verificationNotes String?
  
  // AI Analysis
  aiAnalysisResult Json?          // Store AI analysis results
  confidenceScore  Float?
  
  // Timestamps
  uploadedAt      DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relations
  bookingId       String
  booking         Booking         @relation(fields: [bookingId], references: [id])
  uploadedBy      String
  uploader        User            @relation(fields: [uploadedBy], references: [id])
  
  @@map("receipts")
}

// ===============================
// REVIEWS & RATINGS
// ===============================
model Review {
  id          String    @id @default(cuid())
  rating      Int       // 1-5 stars
  title       String?
  comment     String?
  
  // Detailed Ratings
  cleanlinessRating   Int?
  communicationRating Int?
  checkInRating       Int?
  accuracyRating      Int?
  locationRating      Int?
  valueRating         Int?
  
  // Status
  approved    Boolean   @default(false)
  featured    Boolean   @default(false)
  
  // Response
  hostResponse String?
  hostResponseAt DateTime?
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  bookingId   String
  booking     Booking   @relation(fields: [bookingId], references: [id])
  customerId  String
  customer    User      @relation(fields: [customerId], references: [id])
  propertyId  String
  property    Property  @relation(fields: [propertyId], references: [id])
  
  @@map("reviews")
}

// ===============================
// NOTIFICATIONS
// ===============================
enum NotificationType {
  BOOKING_CONFIRMATION
  PAYMENT_RECEIVED
  RECEIPT_VERIFIED
  BOOKING_APPROVED
  BOOKING_CANCELLED
  REVIEW_REQUEST
  SYSTEM_UPDATE
}

model Notification {
  id          String            @id @default(cuid())
  type        NotificationType
  title       String
  message     String
  data        Json?             // Additional notification data
  read        Boolean           @default(false)
  readAt      DateTime?
  
  // Timestamps
  createdAt   DateTime          @default(now())
  
  // Relations
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  
  @@map("notifications")
}

// ===============================
// AUDIT & LOGGING
// ===============================
enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  APPROVE
  REJECT
  VERIFY
  CANCEL
}

model AuditLog {
  id          String      @id @default(cuid())
  action      AuditAction
  entity      String      // Table/Model name
  entityId    String?     // Record ID
  changes     Json?       // What changed
  ipAddress   String?
  userAgent   String?
  
  // Timestamps
  createdAt   DateTime    @default(now())
  
  // Relations
  userId      String?
  user        User?       @relation(fields: [userId], references: [id])
  
  @@map("audit_logs")
}

// ===============================
// SYSTEM CONFIGURATION
// ===============================
model SystemSetting {
  id          String    @id @default(cuid())
  key         String    @unique
  value       String
  category    String    @default("General")
  description String?
  dataType    String    @default("string")
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("system_settings")
}

// ===============================
// INDEXES FOR PERFORMANCE
// ===============================